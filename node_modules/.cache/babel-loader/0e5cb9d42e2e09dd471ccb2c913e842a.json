{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bill Quan\\\\Desktop\\\\fit3171\\\\fit4002\\\\rr1\\\\src\\\\Components\\\\CourseList.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport CourseTile from \"./CourseTile\";\n\nfunction compare(a, b) {\n  if (new Date(a.startDate) < new Date(b.startDate)) {\n    return -1;\n  }\n\n  if (new Date(a.startDate) > new Date(b.startDate)) {\n    return 1;\n  }\n\n  if (new Date(a.startTime) > new Date(b.startTime)) {\n    return -1;\n  }\n\n  if (new Date(a.startTime) < new Date(b.startTime)) {\n    return 1;\n  }\n\n  return 0;\n}\n\nclass CourseList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      category: \"\",\n      description: \"\",\n      imgUrl: \"\",\n      courseIds: [],\n      courses: []\n    };\n    this.getCourses = this.getCourses.bind(this);\n  } // Retrieve all the courses in the database, and add all the courses to the state\n\n\n  componentDidMount() {\n    // Retrieve an array of courseIds for a given category\n    axios // *** The following commented line is needed for dynamic routes ***\n    .get(`http://localhost:5000/categories/find/${this.props.match.params.category}`).then(response => {\n      this.setState({\n        category: response.data[0].category,\n        description: response.data[0].description,\n        imgUrl: response.data[0].imgUrl,\n        courseIds: response.data[0].courses\n      });\n      this.getCourses(); // This is a proceeding function\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  getCourses() {\n    // Retrieve all the courses given the course's '_id'\n    this.state.courseIds.forEach(courseId => {\n      axios.get(`http://localhost:5000/courses/${courseId}`).then(response => {\n        this.setState({\n          courses: this.state.courses.concat(response.data)\n        }); //console.log(response.data);\n      });\n    });\n    this.setState({\n      courses: this.state.courses.sort(compare)\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    }, this.state.category), /*#__PURE__*/React.createElement(\"img\", {\n      src: this.state.imgUrl,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }, this.state.description)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row row-cols-1 row-cols-md-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }\n    }, this.state.courses.map(course => {\n      return /*#__PURE__*/React.createElement(CourseTile, {\n        category: this.props.match.params.category,\n        title: course.title,\n        description: course.description,\n        key: course._id,\n        id: course._id,\n        startDate: course.startDate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }\n      });\n    })));\n  }\n\n}\n\nexport default CourseList;","map":{"version":3,"sources":["C:/Users/Bill Quan/Desktop/fit3171/fit4002/rr1/src/Components/CourseList.js"],"names":["React","Component","axios","CourseTile","compare","a","b","Date","startDate","startTime","CourseList","constructor","props","state","category","description","imgUrl","courseIds","courses","getCourses","bind","componentDidMount","get","match","params","then","response","setState","data","catch","error","console","log","forEach","courseId","concat","sort","render","map","course","title","_id"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport CourseTile from \"./CourseTile\";\r\n\r\nfunction compare( a, b ) {\r\n    if ( new Date(a.startDate) < new Date(b.startDate) ){\r\n        return -1;\r\n    }\r\n    if ( new Date(a.startDate) > new Date(b.startDate) ){\r\n        return 1;\r\n    }\r\n    if ( new Date(a.startTime) > new Date(b.startTime) ){\r\n        return -1;\r\n    }\r\n    if ( new Date(a.startTime) < new Date(b.startTime) ){\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\nclass CourseList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      category: \"\",\r\n      description: \"\",\r\n      imgUrl: \"\",\r\n      courseIds: [],\r\n      courses: [],\r\n    };\r\n\r\n    this.getCourses = this.getCourses.bind(this);\r\n  }\r\n\r\n  // Retrieve all the courses in the database, and add all the courses to the state\r\n  componentDidMount() {\r\n    // Retrieve an array of courseIds for a given category\r\n    axios\r\n      // *** The following commented line is needed for dynamic routes ***\r\n      .get(\r\n        `http://localhost:5000/categories/find/${this.props.match.params.category}`\r\n      )\r\n      .then((response) => {\r\n        this.setState({\r\n          category: response.data[0].category,\r\n          description: response.data[0].description,\r\n          imgUrl: response.data[0].imgUrl,\r\n          courseIds: response.data[0].courses,\r\n        });\r\n        this.getCourses(); // This is a proceeding function\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  getCourses() {\r\n    // Retrieve all the courses given the course's '_id'\r\n    this.state.courseIds.forEach((courseId) => {\r\n      axios\r\n        .get(`http://localhost:5000/courses/${courseId}`)\r\n        .then((response) => {\r\n          this.setState({\r\n            courses: this.state.courses.concat(response.data)\r\n          });\r\n          //console.log(response.data);\r\n        });\r\n    });\r\n    this.setState({\r\n          courses: this.state.courses.sort(compare)\r\n    });\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <h1>{this.state.category}</h1>\r\n          <img src={this.state.imgUrl} alt=\"\" />\r\n          <p>{this.state.description}</p>\r\n        </div>\r\n        <div className=\"row row-cols-1 row-cols-md-2\">\r\n          {this.state.courses.map((course) => {\r\n            return (\r\n              <CourseTile\r\n                category={this.props.match.params.category}\r\n                title={course.title}\r\n                description={course.description}\r\n                key={course._id}\r\n                id={course._id}\r\n                  startDate={course.startDate}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CourseList;\r\n"]},"metadata":{},"sourceType":"module"}